{"version":3,"sources":["pubnub-react.js"],"names":["PubNubReact","config","instance","_pubnubInstance","_autoload","component","state","pn_messages","pn_status","pn_presence","$merge","_component","_broadcast","_listener","_keepMessages","addListener","initialize","getPresence","bind","getMessage","getStatus","clean","release","args","subscribe","enableLoad","unsubscribe","disableLoad","ReferenceError"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;IAEqBA,W;AACnB,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAIC,WAAW,qBAAWD,MAAX,CAAf;AACA,2BAAKC,QAAL,EAAe,IAAf;;AAEA,SAAKC,eAAL,GAAuBD,QAAvB;AACA,SAAKE,SAAL,GAAiB,wBAAjB;AACD;;;;yBAOIC,S,EAAW;AACd,UAAI,CAACA,UAAUC,KAAf,EAAsB;AACpBD,kBAAUC,KAAV,GAAkB,EAAEC,aAAa,EAAf,EAAmBC,WAAW,EAA9B,EAAkCC,aAAa,EAA/C,EAAlB;AACD,OAFD,MAEO;AACLJ,kBAAUC,KAAV,GAAkB,kCAAOD,UAAUC,KAAjB,EAAwB,EAAEI,QAAQ,EAAEF,WAAW,EAAb,EAAiBD,aAAa,EAA9B,EAAkCE,aAAa,EAA/C,EAAV,EAAxB,CAAlB;AACD;;AAED,WAAKE,UAAL,GAAkBN,SAAlB;AACA,WAAKO,UAAL,GAAkB,0BAAlB;AACA,WAAKC,SAAL,GAAiB,EAAjB;AACA,WAAKC,aAAL,GAAqB,EAArB;;AAEA,WAAKC,WAAL,CAAiB,KAAKF,SAAtB;AACA,WAAKT,SAAL,CAAeY,UAAf,CAA0B,IAA1B;;AAEA,WAAKC,WAAL,GAAmB,qBAAYC,IAAZ,CAAiB,IAAjB,CAAnB;AACA,WAAKC,UAAL,GAAkB,oBAAWD,IAAX,CAAgB,IAAhB,CAAlB;AACA,WAAKE,SAAL,GAAiB,mBAAUF,IAAV,CAAe,IAAf,CAAjB;AACA,WAAKG,KAAL,GAAa,eAAMH,IAAN,CAAW,IAAX,CAAb;AACA,WAAKI,OAAL,GAAe,iBAAQJ,IAAR,CAAa,IAAb,CAAf;AACD;;;8BAOSK,I,EAAM;AACd,WAAKpB,eAAL,CAAqBqB,SAArB,CAA+BD,IAA/B;AACA,WAAKnB,SAAL,CAAeqB,UAAf,CAA0BF,IAA1B;AACD;;;gCAOWA,I,EAAM;AAChB,WAAKpB,eAAL,CAAqBuB,WAArB,CAAiCH,IAAjC;AACA,WAAKnB,SAAL,CAAeuB,WAAf,CAA2BJ,IAA3B;AACD;;;0CAOqB;AACpB,UAAI,KAAKpB,eAAT,EAA0B;AACxB,eAAO,KAAKA,eAAZ;AACD,OAFD,MAEO;AACL,cAAM,IAAIyB,cAAJ,CAAmB,8EAAnB,CAAN;AACD;AACF;;;;;;kBAnEkB5B,W","file":"pubnub-react.js","sourcesContent":["import PubNub from 'pubnub';\nimport update from 'immutability-helper';\nimport wrap from './wrapper';\nimport Autoload from './autoload';\nimport { Broadcast } from './broadcast';\nimport { getStatus, getMessage, getPresence, clean, release } from './modules';\n\nexport default class PubNubReact {\n  constructor(config) {\n    let instance = new PubNub(config);\n    wrap(instance, this);\n\n    this._pubnubInstance = instance;\n    this._autoload = new Autoload();\n  }\n\n  /**\n   * Set the react's states to invoke a new render process when a new real time message is received\n   *\n   * @param {component} args\n   */\n  init(component) {\n    if (!component.state) {\n      component.state = { pn_messages: {}, pn_status: {}, pn_presence: {} };\n    } else {\n      component.state = update(component.state, { $merge: { pn_status: {}, pn_messages: {}, pn_presence: {} } });\n    }\n\n    this._component = component;\n    this._broadcast = new Broadcast();\n    this._listener = {};\n    this._keepMessages = {};\n\n    this.addListener(this._listener);\n    this._autoload.initialize(this);\n\n    this.getPresence = getPresence.bind(this);\n    this.getMessage = getMessage.bind(this);\n    this.getStatus = getStatus.bind(this);\n    this.clean = clean.bind(this);\n    this.release = release.bind(this);\n  }\n\n  /**\n   * Wrap the subscribe method to enable trigger events to the broadcast\n   *\n   * @param {object} args\n   */\n  subscribe(args) {\n    this._pubnubInstance.subscribe(args);\n    this._autoload.enableLoad(args);\n  }\n\n  /**\n   * Wrap the unsubscribe method to disable the trigger events to the broadcast\n   *\n   * @param args\n   */\n  unsubscribe(args) {\n    this._pubnubInstance.unsubscribe(args);\n    this._autoload.disableLoad(args);\n  }\n\n  /**\n   * Get the PubNub instance wrapped or throw an exception if this is not instanced yet\n   *\n   * @returns {PubNub|*|null}\n   */\n  getOriginalInstance() {\n    if (this._pubnubInstance) {\n      return this._pubnubInstance;\n    } else {\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\n    }\n  }\n}\n"]}